---
description: 
globs: 
alwaysApply: false
---
# Geospatial Map Implementation Details

## Required Libraries

The geospatial map feature uses these libraries:
```python
import pydeck as pdk
import plotly.express as px
import plotly.graph_objects as go
import branca.colormap as cm
import h3
```

Ensure all these are available in the Snowflake Anaconda Channel: https://repo.anaconda.com/pkgs/snowflake/

## Core Map Implementation

The new `create_chart11()` function in [utils/chart_utils.py](mdc:utils/chart_utils.py) should be based on the 3D hexagon map visualization from [Dev/3_Geospatial_Analysis.py](mdc:Dev/3_Geospatial_Analysis.py).

Key components to extract:
1. The color schemes (like `colors_white_blue`)
2. The H3 grid functionality for grouping points
3. The pydeck visualization code that renders the map

### Function Signature

```python
def create_chart11(df, cols):
    """
    Create Chart 11: Geospatial Map
    
    Parameters:
    -----------
    df : pandas.DataFrame
        DataFrame with latitude and longitude data
    cols : dict
        Column configuration with lat_col and lon_col
        
    Returns:
    --------
    pydeck.Deck
        Interactive 3D map visualization
    """
```

### Map Designer Implementation

The new Map Designer page should provide controls for:

1. **Metrics Selection**: Allow users to select up to 3 metrics to display simultaneously
   ```python
   selected_metrics = st.sidebar.multiselect(
       "Select Metrics to Display",
       available_metrics,
       default=[first_metric],
       help="Select one or more metrics to display on the map. Multiple metrics will be overlaid."
   )
   ```

2. **Layer Settings** for each metric:
   ```python
   with st.sidebar.expander(f"⚙️ {metric_name} Layer Settings", expanded=(index == 0)):
       # Resolution selector for H3 level
       resolution = st.slider(
           f"{metric_name} H3 Resolution (Grid Size)",
           min_value=4,  # Coarser
           max_value=11, # Finer
           value=6,      # Default
           key=f"h3_resolution_{metric_name}"
       )
       
       # Opacity selector
       opacity = st.slider(
           f"{metric_name} Opacity",
           min_value=0.0, 
           max_value=1.0,
           value=0.5,
           step=0.05,
           key=f"opacity_{metric_name}"
       )
       
       # Color scheme selector
       color_options = ("White-Blue", "White-Red", "White-Green", "Yellow-Blue", "Yellow-Red", "Blue-Green")
       style_option = st.selectbox(
           f"{metric_name} Color Scheme",
           color_options,
           key=f"style_{metric_name}"
       )
   ```

3. **Save Functionality**: Allow users to save the customized map configuration

### Core Map Code

The implementation should adapt these key functions from the geospatial analysis file:
1. `calculate_rgba_color()` - For color coding data points
2. `create_layer()` - For creating the map layer
3. Parts of `prepare_visualization_data()` - For data preparation
4. Layer blending for multiple metrics

## Streamlit Integration

Since pydeck returns a different object type than Altair charts, adjust the display code in [pages/1_Cortex_Analyst.py](mdc:pages/1_Cortex_Analyst.py) to use `st.pydeck_chart()` when a map is returned:

```python
if isinstance(alt_chart, pdk.Deck):
    st.pydeck_chart(alt_chart)
elif alt_chart:
    st.altair_chart(alt_chart, use_container_width=True)
```

## Chart Generation Code
Add chart11 to the `generate_chart_code_for_dataframe()` function in chart_utils.py, with proper imports:

```python
elif 'chart11_columns' in chart_metadata:
    cols = chart_metadata['chart11_columns']
    lat_col = cols.get('lat_col')
    lon_col = cols.get('lon_col')
    
    if not lat_col or not lon_col:
        print(f"    # Error: Missing required columns for chart11", file=buf)
        print(f"    st.error('Missing required columns for Geospatial Map')", file=buf)
        print(f"    return None", file=buf)
    else:
        print(f"    import pydeck as pdk", file=buf)
        print(f"    import numpy as np", file=buf)
        print(f"    try:", file=buf)
        print(f"        import h3", file=buf)
        print(f"    except ImportError:", file=buf)
        print(f"        st.error('H3 library not available. Please install it in the Snowflake environment.')", file=buf)
        print(f"        return None", file=buf)
        # Include the map generation code
```
